raindex-version: 8898591f3bcaa21dc91dc3b8584330fc405eadfa

gui:
  name: Two-sided dynamic spread strategies
  description: The dynamic spread strategy for market-making uses time-based adjustments to maintain liquidity by narrowing spreads as market conditions stabilize, while recalculating averages and trade sizes to mitigate risks during trends.
  deployments:
    - deployment: flare-usdc-sflr
      name: USDC<>sFLR on Flare.
      description: This will rotate USDC and sFLR on Flare.

      fields:
        - binding: initial-io
          name: Initial price (USDC per sFLR)
          description: This should be the USD price you see for sFLR on Dextools (e.g. 0.0172).
          min: 0
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          min: 0
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          min: 0
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: min-trade-amount
          name: Minimum trade amount
          description: The minimum amount of USDC.e that can be traded in a single auction.
          min: 0
          presets:
            - name: $0.1
              value: 0.1
            - name: $1
              value: 1
            - name: $10
              value: 10
        - binding: max-amount
          name: Max amount
          description: The maximum amount of USDC.e that can be traded in a single auction.
          min: 0
          presets:
            - name: $100
              value: 100
            - name: $1000
              value: 1000
            - name: $10000
              value: 10000

      deposits:
        - token: usdce
          min: 20
          presets:
            - 0.01
            - 50
            - 100
        - token: sflr
          min: 20
          presets:
            - 0.01
            - 50
            - 100

scenarios:
  flare:
    orderbook: flare
    runs: 1
    bindings:
      max-amount: 100
      min-amount: 1
      min-trade-amount: 0.1
      time-per-epoch: 7200
      next-trade-multiplier: 1.01
      history-cap: '1e50'
      amount-token: 0xfbda5f676cb37624f28265a144a48b0d6e87d3b6
      initial-io: 2412
      initial-output-token: 0x12e605bc104e93B45e1aD99F9e555f659051c2BB
      initial-input-token: 0xfbda5f676cb37624f28265a144a48b0d6e87d3b6

networks:
  flare:
    rpc: https://rpc.ankr.com/flare
    chain-id: 14
    network-id: 14
    currency: FLR
metaboards:
  flare: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-flare-0x893BBFB7/0.1/gn
subgraphs:
  flare: https://example.com/subgraph
orderbooks:
  flare:
    address: 0xCEe8Cd002F151A536394E564b84076c41bBBcD4d
deployers:
  flare:
    address: 0xE3989Ea7486c0F418C764e6c511e86f6E8830FAb

tokens:
  usdce:
    network: flare
    address: 0xfbda5f676cb37624f28265a144a48b0d6e87d3b6
    decimals: 6
  wflr:
    network: flare
    address: 0x1D80c49BbBCd1C0911346656B529DF9E5c2F783d
    decimals: 18
  sflr:
    network: flare
    address: 0x12e605bc104e93B45e1aD99F9e555f659051c2BB
    decimals: 18
  weth:
    network: flare
    address: 0x1502FA4be69d526124D453619276FacCab275d3D
    decimals: 18

orders:
  flare:
    network: flare
    orderbook: flare
    inputs:
      - token: sflr
      - token: usdce
    outputs:
      - token: sflr
      - token: usdce

deployments:
  flare:
    order: flare
    scenario: flare
---
#raindex-subparser 0xFe2411CDa193D9E4e83A5c234C7Fd320101883aC

#min-amount !Amount will decay down to this number each epoch.
#max-amount !Amount will decay down from this number each epoch.
#min-trade-amount !Each trade must be at least this many output tokens.
#time-per-epoch !Duration of one unit of streaming amount and io ratio halflife.
#next-trade-multiplier !Start next auction at this x the last trade.
#history-cap !The max amount of trade history kept for cost basis tracking (denominated in same token as tranche size).
#amount-token !The token that is the amount token for the strategy. This denominates tranche sizes.
#initial-io !The IO ratio that the strategy starts at. The quote token is the output so that the IO ratio looks like a CEX price.
#initial-output-token !Initial output token for the initial IO ratio.
#initial-input-token !Initial input token for the initial IO ratio.

#last-trade-io-key "last-trade-io"
#last-trade-time-key "last-trade-time"
#last-trade-output-token-key "last-trade-output-token"
#vwaio-key "cost-basis-io-ratio"

#amount-is-output
  _: equal-to(amount-token output-token());

#get-cost-basis-io-ratio
  this-vwaio: get(hash(order-hash() input-token() output-token() vwaio-key)),
  other-vwaio: get(hash(order-hash() output-token() input-token() vwaio-key)),
  _: any(this-vwaio inv(any(other-vwaio max-value())));

#set-cost-basis-io-ratio
  /* first reduce outstanding inventory */
  other-total-out-key: hash(order-hash() output-token() input-token()),
  other-vwaio-key: hash(order-hash() output-token() input-token() vwaio-key),
  other-total-out: get(other-total-out-key),
  other-vwaio: get(other-vwaio-key),
  other-reduction-out: min(other-total-out input-vault-increase()),
  reduced-other-total-out: sub(other-total-out other-reduction-out),
  :set(other-total-out-key reduced-other-total-out),
  :set(other-vwaio-key every(reduced-other-total-out other-vwaio)),

  /* then increase our inventory */
  total-out-key: hash(order-hash() input-token() output-token()),
  this-vwaio-key: hash(order-hash() input-token() output-token() vwaio-key),
  total-out: get(total-out-key),
  vwaio: get(this-vwaio-key),
  total-in: mul(total-out vwaio),
  remaining-in: sub(input-vault-increase() other-reduction-out),
  new-in: add(total-in remaining-in),
  remaining-out: div(remaining-in calculated-io-ratio()),
  new-out: add(total-out remaining-out),
  new-vwaio: every(new-out div(new-in any(new-out max-value()))),
  cap-out: if(call<'amount-is-output>() history-cap div(history-cap any(new-vwaio calculated-io-ratio()))),
  capped-out: min(new-out cap-out),
  :set(total-out-key capped-out),
  :set(this-vwaio-key new-vwaio);

#halflife
epoch:,
/**
 * Shrinking the multiplier like this
 * then applying it 10 times allows for
 * better precision when max-io-ratio
 * is very large, e.g. ~1e10 or ~1e20+
 *
 * This works because `power` loses
 * precision on base `0.5` when the
 * exponent is large and can even go
 * to `0` while the io-ratio is still
 * large. Better to keep the multiplier
 * higher precision and drop the io-ratio
 * smoothly for as long as we can.
 */
multiplier:
  power(0.5 div(epoch 10)),
val:
  mul(
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
  );

#set-last-trade
last-io:,
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) last-io),
:set(hash(order-hash() last-trade-output-token-key) output-token());

#handle-add-order
using-words-from raindex-subparser
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) initial-io),
:set(hash(order-hash() last-trade-output-token-key) initial-output-token),
:set(hash(order-hash() initial-input-token initial-output-token) 1e-18),
:set(hash(order-hash() initial-input-token initial-output-token vwaio-key) initial-io);

#get-last-trade
stored-last-io:get(hash(order-hash() last-trade-io-key)),
stored-last-output-token:get(hash(order-hash() last-trade-output-token-key)),
last-time:get(hash(order-hash() last-trade-time-key)),
_: if(equal-to(stored-last-output-token output-token()) stored-last-io inv(stored-last-io));

#get-epoch
last-time _: call<'get-last-trade>(),
duration: sub(now() last-time),
epochs: div(duration time-per-epoch);

#amount-for-epoch
epoch io:,
decay: call<'halflife>(epoch),
variable-component: sub(max-amount min-amount),
base-amount: add(min-amount mul(variable-component decay)),
_: if(call<'amount-is-output>() base-amount mul(base-amount inv(io)));

#io-for-epoch
epoch:,
last-io: call<'get-last-trade>(),
cost-basis-io: call<'get-cost-basis-io-ratio>(),
max-next-trade: mul(max(cost-basis-io last-io) next-trade-multiplier),
baseline: any(cost-basis-io last-io),
variable-component: sub(max-next-trade baseline),
decay: call<'halflife>(epoch),
above-baseline: mul(variable-component decay),
_: add(baseline above-baseline);

#calculate-io
using-words-from raindex-subparser
epoch:call<'get-epoch>(),
io: call<'io-for-epoch>(epoch),
max-output: call<'amount-for-epoch>(epoch io),
_: io,
:call<'set-last-trade>(io);

#handle-io
:ensure(greater-than-or-equal-to(if(call<'amount-is-output>() output-vault-decrease() input-vault-increase()) min-trade-amount) "Min trade amount."),
:call<'set-cost-basis-io-ratio>();