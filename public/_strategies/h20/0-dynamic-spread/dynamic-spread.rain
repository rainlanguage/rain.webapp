raindex-version: ef0670ae29fa4f03fa04e1cb0252714209392699

gui:
  name: Two-sided dynamic spread strategies
  description: The dynamic spread strategy for market-making uses time-based adjustments to maintain liquidity by narrowing spreads as market conditions stabilize, while recalculating averages and trade sizes to mitigate risks during trends.
  deployments:
    - deployment: clip-weth
      name: CLIP/WETH
      description: This will rotate CLIP and WETH.

      fields:
        - binding: initial-io
          name: Initial price
          description: This should be the amount of CLIP you get for 1 WETH on Lynex.
          min: 0
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          min: 0
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: time-per-epoch
          name: Time per epoch
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          min: 0
          presets:
            - name: 30 minutes
              value: 1800
            - name: 1 hour
              value: 3600
            - name: 4 hours
              value: 14400
            - name: 8 hours
              value: 28800
        - binding: min-amount
          name: Min amount
          description: The minimum amount of WETH that can be traded in a single auction.
          min: 0
          presets:
            - name: 0.0001
              value: 0.0001
            - name: 0.001
              value: 0.001
        - binding: max-amount
          name: Max amount
          description: The maximum amount of WETH that can be traded in a single auction.
          min: 0
          presets:
            - name: 100
              value: 100
            - name: 1000
              value: 1000
            - name: 10000
              value: 10000
        - binding: min-trade-amount
          name: Minimum trade amount
          description: The minimum amount of WETH that can be output in a single trade.
          min: 0
          presets:
            - name: 0.00001
              value: 0.00001
            - name: 0.0001
              value: 0.0001
            - name: 0.001
              value: 0.001

      deposits:
        - token: linea-clip
          min: 0
          presets:
            - 0.01
            - 50
            - 100
        - token: linea-weth
          min: 0
          presets:
            - 0.01
            - 50
            - 100

networks:
  linea:
    rpc: https://rpc.linea.build
    chain-id: 59144
    network-id: 59144
    currency: ETH
subgraphs:
  linea: https://example.com/subgraph
metaboards:
  linea: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-linea-0xed7d6156/1.0.0/gn
orderbooks:
  linea:
    address: 0x22410e2a46261a1B1e3899a072f303022801C764
    network: linea
    subgraph: linea
deployers:
  linea:
    address: 0xA2f56F8F74B7d04d61f281BE6576b6155581dcBA
    network: linea

tokens:
  linea-clip:
    network: linea
    address: 0x4Ea77a86d6E70FfE8Bb947FC86D68a7F086f198a
    decimals: 18
  linea-weth:
    network: linea
    address: 0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f
    decimals: 18

orders:
  linea:
    orderbook: linea
    network: linea
    inputs:
      - token: linea-weth
      - token: linea-clip
    outputs:
      - token: linea-weth
      - token: linea-clip

scenarios:
  linea:
    orderbook: linea
    runs: 1
    bindings:
      max-amount: 0.02
      min-amount: 0.00001
      min-trade-amount: 0.0002
      time-per-epoch: 1800
      next-trade-multiplier: 1.01
      history-cap: '1e50'
      amount-token: 0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f
      initial-io: 19569 # this needs to be the price on lynex at the time of deploy
      initial-output-token: 0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f
      initial-input-token: 0x4Ea77a86d6E70FfE8Bb947FC86D68a7F086f198a

deployments:
  clip-weth:
    order: linea
    scenario: linea
---
#raindex-subparser 0xF77b3c3f61af5a3cE7f7CE3cfFc117491104432E

#min-amount !Amount will decay down to this number each epoch.
#max-amount !Amount will decay down from this number each epoch.
#min-trade-amount !Each trade must be at least this many output tokens.
#time-per-epoch !Duration of one unit of streaming amount and io ratio halflife.
#next-trade-multiplier !Start next auction at this x the last trade.
#history-cap !The max amount of trade history kept for cost basis tracking (denominated in same token as tranche size).
#amount-token !The token that is the amount token for the strategy. This denominates tranche sizes.
#initial-io !The IO ratio that the strategy starts at. The quote token is the output so that the IO ratio looks like a CEX price.
#initial-output-token !Initial output token for the initial IO ratio.
#initial-input-token !Initial input token for the initial IO ratio.

#last-trade-io-key "last-trade-io"
#last-trade-time-key "last-trade-time"
#last-trade-output-token-key "last-trade-output-token"
#vwaio-key "cost-basis-io-ratio"

#amount-is-output
  _: equal-to(amount-token output-token());

#get-cost-basis-io-ratio
  this-vwaio: get(hash(order-hash() input-token() output-token() vwaio-key)),
  other-vwaio: get(hash(order-hash() output-token() input-token() vwaio-key)),
  _: any(this-vwaio inv(any(other-vwaio max-value())));

#set-cost-basis-io-ratio
  /* first reduce outstanding inventory */
  other-total-out-key: hash(order-hash() output-token() input-token()),
  other-vwaio-key: hash(order-hash() output-token() input-token() vwaio-key),
  other-total-out: get(other-total-out-key),
  other-vwaio: get(other-vwaio-key),
  other-reduction-out: min(other-total-out input-vault-increase()),
  reduced-other-total-out: sub(other-total-out other-reduction-out),
  :set(other-total-out-key reduced-other-total-out),
  :set(other-vwaio-key every(reduced-other-total-out other-vwaio)),

  /* then increase our inventory */
  total-out-key: hash(order-hash() input-token() output-token()),
  this-vwaio-key: hash(order-hash() input-token() output-token() vwaio-key),
  total-out: get(total-out-key),
  vwaio: get(this-vwaio-key),
  total-in: mul(total-out vwaio),
  remaining-in: sub(input-vault-increase() other-reduction-out),
  new-in: add(total-in remaining-in),
  remaining-out: div(remaining-in calculated-io-ratio()),
  new-out: add(total-out remaining-out),
  new-vwaio: every(new-out div(new-in any(new-out max-value()))),
  cap-out: if(call<'amount-is-output>() history-cap div(history-cap any(new-vwaio calculated-io-ratio()))),
  capped-out: min(new-out cap-out),
  :set(total-out-key capped-out),
  :set(this-vwaio-key new-vwaio);

#halflife
epoch:,
/**
 * Shrinking the multiplier like this
 * then applying it 10 times allows for
 * better precision when max-io-ratio
 * is very large, e.g. ~1e10 or ~1e20+
 *
 * This works because `power` loses
 * precision on base `0.5` when the
 * exponent is large and can even go
 * to `0` while the io-ratio is still
 * large. Better to keep the multiplier
 * higher precision and drop the io-ratio
 * smoothly for as long as we can.
 */
multiplier:
  power(0.5 div(epoch 10)),
val:
  mul(
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
  );

#set-last-trade
last-io:,
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) last-io),
:set(hash(order-hash() last-trade-output-token-key) output-token());

#handle-add-order
using-words-from raindex-subparser
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) initial-io),
:set(hash(order-hash() last-trade-output-token-key) initial-output-token),
:set(hash(order-hash() initial-input-token initial-output-token) 1e-18),
:set(hash(order-hash() initial-input-token initial-output-token vwaio-key) initial-io);

#get-last-trade
stored-last-io:get(hash(order-hash() last-trade-io-key)),
stored-last-output-token:get(hash(order-hash() last-trade-output-token-key)),
last-time:get(hash(order-hash() last-trade-time-key)),
_: if(equal-to(stored-last-output-token output-token()) stored-last-io inv(stored-last-io));

#get-epoch
last-time _: call<'get-last-trade>(),
duration: sub(now() last-time),
epochs: div(duration time-per-epoch);

#amount-for-epoch
epoch io:,
decay: call<'halflife>(epoch),
variable-component: sub(max-amount min-amount),
base-amount: add(min-amount mul(variable-component decay)),
_: if(call<'amount-is-output>() base-amount mul(base-amount inv(io)));

#io-for-epoch
epoch:,
last-io: call<'get-last-trade>(),
cost-basis-io: call<'get-cost-basis-io-ratio>(),
max-next-trade: mul(max(cost-basis-io last-io) next-trade-multiplier),
baseline: any(cost-basis-io last-io),
variable-component: sub(max-next-trade baseline),
decay: call<'halflife>(epoch),
above-baseline: mul(variable-component decay),
_: add(baseline above-baseline);

#calculate-io
using-words-from raindex-subparser
epoch:call<'get-epoch>(),
io: call<'io-for-epoch>(epoch),
max-output: call<'amount-for-epoch>(epoch io),
_: io,
:call<'set-last-trade>(io);

#handle-io
:ensure(greater-than-or-equal-to(if(call<'amount-is-output>() output-vault-decrease() input-vault-increase()) min-trade-amount) "Min trade amount."),
:call<'set-cost-basis-io-ratio>();