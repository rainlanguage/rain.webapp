raindex-version: 8898591f3bcaa21dc91dc3b8584330fc405eadfa

networks:
  base:
    rpc: https://mainnet.base.org
    chain-id: 8453
    network-id: 8453
    currency: ETH

metaboards:
  base: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-base/0.1/gn

subgraphs:
  base: https://example.com/subgraph

orderbooks:
  base:
    address: 0xd2938e7c9fe3597f78832ce780feb61945c377d7
    network: base
    subgraph: base

deployers:
  base:
    address: 0xC1A14cE2fd58A3A2f99deCb8eDd866204eE07f8D
    network: base

tokens:
  base-cofek:
    network: base
    address: 0x222789334D44bB5b2364939477E15A6c981Ca165
    decimals: 18
  base-usdc:
    network: base
    address: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    decimals: 6
  base-weth:
    network: base
    address: 0x4200000000000000000000000000000000000006
    decimals: 18
  

orders:
  base-usdc-cofek:
    orderbook: base
    network: base
    inputs:
      - token: base-usdc
    outputs:
      - token: base-cofek
  base-cofek-usdc:
    orderbook: base
    network: base
    inputs:
      - token: base-cofek
    outputs:
      - token: base-usdc
  base-weth-cofek:
    orderbook: base
    network: base
    inputs:
      - token: base-weth
    outputs:
      - token: base-cofek
  base-cofek-weth:
    orderbook: base
    network: base
    inputs:
      - token: base-cofek
    outputs:
      - token: base-weth
 
scenarios:
  base:
    orderbook: base
    runs: 1
    bindings:
      raindex-subparser: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      subparser-0: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05

deployments:
  base-usdc-cofek:
    order: base-usdc-cofek
    scenario: base
  base-cofek-usdc:
    order: base-cofek-usdc
    scenario: base
  base-weth-cofek:
    order: base-weth-cofek
    scenario: base
  base-cofek-weth:
    order: base-cofek-weth
    scenario: base

gui:
  name: Auction based cost averaging
  description: >
    Swap some token for another token regularly over time, using a preset budget.

    This is called "cost averaging" because spreading out a single large swap
    into many smaller swaps over time reduces the impact of temporary market
    movements.

    The strategy works by repeatedly auctioning off tokens with an exponential
    decay in the price, that resets each trade.
  deployments:
    - deployment: base-usdc-cofek
      name: Sell COFEK for USDC on Base.
      description: >
        Sell COFEK for USDC on Base.
      deposits:
        - token: base-cofek
          min: 0
          presets:
            - 0
            - 100
            - 1000
            - 10000

      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: >
            The budget is spent over this time period.
          min: 1
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
        - binding: amount-per-epoch
          name: Budget (COFEK per period)
          description: >
            The amount of COFEK to spend each budget period.
          min: 0
        - binding: max-trade-amount
          name: Maximum trade size (COFEK)
          description: >
            The maximum amount of COFEK to sell in a single auction.
          min: 0
        - binding: min-trade-amount
          name: Minimum trade size (COFEK)
          description: >
            The minimum amount of COFEK to sell in a single auction.
          min: 0
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: >
            The auction period is the time between each auction price halvening.
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 4 hours (14400)
              value: 14400
        - binding: baseline
          name: Baseline USDC per COFEK
          description: >
            The absolute minimum amount of USDC per COFEK that the auction will trade at (e.g. 0.03 USDC per COFEK)
          min: 0
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: >
            The multiplier to apply to the last trade to kick off the next auction.
          min: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: >
            The multiplier to apply to the last trade to set the baseline for the next auction.
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
        - binding: initial-io
          name: Kickoff USDC per COFEK
          description: >
            The initial USDC per COFEK to kickoff the first auction (e.g. 0.05 USDC per COFEK)
          min: 0

    - deployment: base-cofek-usdc
      name: Buy COFEK with USDC on Base.
      description: >
        Buy COFEK with USDC on Base.
      deposits:
        - token: base-usdc
          min: 0
          presets:
            - 0
            - 100
            - 1000
            - 10000

      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: >
            The budget is spent over this time period.
          min: 1
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
        - binding: amount-per-epoch
          name: Budget (USDC per period)
          description: >
            The amount of USDC to spend each budget period.
          min: 0
        - binding: max-trade-amount
          name: Maximum trade size (USDC)
          description: >
            The maximum amount of USDC to spend in a single auction.
          min: 0
        - binding: min-trade-amount
          name: Minimum trade size (USDC)
          description: >
            The minimum amount of USDC to spend in a single auction.
          min: 0
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: >
            The auction period is the time between each auction price halvening.
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 4 hours (14400)
              value: 14400
        - binding: baseline
          name: Baseline COFEK per USDC
          description: >
            The absolute minimum amount of COFEK per USDC that the auction will trade at (e.g. 10 COFEK per USDC)
          min: 0
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: >
            The multiplier to apply to the last trade to kick off the next auction.
          min: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: >
            The multiplier to apply to the last trade to set the baseline for the next auction.
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
        - binding: initial-io
          name: Kickoff COFEK per USDC
          description: >
            The initial COFEK per USDC to kickoff the first auction (e.g. 20 COFEK per USDC)
          min: 0

    - deployment: base-weth-cofek
      name: Sell COFEK for WETH on Base.
      description: >
        Sell COFEK for WETH on Base.
      deposits:
        - token: base-cofek
          min: 0
          presets:
            - 0
            - 100
            - 1000
            - 10000

      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: >
            The budget is spent over this time period.
          min: 1
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
        - binding: amount-per-epoch
          name: Budget (COFEK per period)
          description: >
            The amount of COFEK to spend each budget period.
          min: 0
        - binding: max-trade-amount
          name: Maximum trade size (COFEK)
          description: >
            The maximum amount of COFEK to sell in a single auction.
          min: 0
        - binding: min-trade-amount
          name: Minimum trade size (COFEK)
          description: >
            The minimum amount of COFEK to sell in a single auction.
          min: 0
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: >
            The auction period is the time between each auction price halvening.
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 4 hours (14400)
              value: 14400
        - binding: baseline
          name: Baseline WETH per COFEK
          description: >
            The absolute minimum amount of WETH per COFEK that the auction will trade at (e.g. 0.03 WETH per COFEK)
          min: 0
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: >
            The multiplier to apply to the last trade to kick off the next auction.
          min: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: >
            The multiplier to apply to the last trade to set the baseline for the next auction.
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
        - binding: initial-io
          name: Kickoff WETH per COFEK
          description: >
            The initial WETH per COFEK to kickoff the first auction (e.g. 0.05 WETH per COFEK)
          min: 0

    - deployment: base-cofek-weth
      name: Buy COFEK with WETH on Base.
      description: >
        Buy COFEK with WETH on Base.
      deposits:
        - token: base-weth
          min: 0
          presets:
            - 0
            - 0.1
            - 0.5
            - 1

      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: >
            The budget is spent over this time period.
          min: 1
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
        - binding: amount-per-epoch
          name: Budget (WETH per period)
          description: >
            The amount of WETH to spend each budget period.
          min: 0
        - binding: max-trade-amount
          name: Maximum trade size (WETH)
          description: >
            The maximum amount of WETH to spend in a single auction.
          min: 0
        - binding: min-trade-amount
          name: Minimum trade size (WETH)
          description: >
            The minimum amount of WETH to spend in a single auction.
          min: 0
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: >
            The auction period is the time between each auction price halvening.
          presets:
            - name: Per minute (60)
              value: 60
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 4 hours (14400)
              value: 14400
        - binding: baseline
          name: Baseline COFEK per WETH
          description: >
            The absolute minimum amount of COFEK per WETH that the auction will trade at (e.g. 10 COFEK per WETH)
          min: 0
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: >
            The multiplier to apply to the last trade to kick off the next auction.
          min: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: >
            The multiplier to apply to the last trade to set the baseline for the next auction.
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
        - binding: initial-io
          name: Kickoff COFEK per WETH
          description: >
            The initial COFEK per WETH to kickoff the first auction (e.g. 20 COFEK per WETH)
          min: 0
---
#raindex-subparser !Raindex subparser.
#subparser-0 !Subparser 0.

#time-per-amount-epoch !Duration of one unit of streaming amount halflife.
#amount-per-epoch !Amount of output token to approve for buying per epoch.
#min-trade-amount !Each trade must be at least this many output tokens.
#max-trade-amount !Each trade will be capped at this many tokens.

#time-per-trade-epoch !Duration of one unit of io ratio halflife.
#shy-epoch !Epoch below which only the minimum amount is offered.
#baseline !Minimum io ratio. This component of the io ratio is ignored by the halflife calculations.

#baseline-fn !Function to calculate the baseline for the next trade.

#next-trade-multiplier !Start next auction at this x the last trade.
#next-trade-baseline-multiplier !Lifts the baseline to here relative to the previous trade.

#initial-io-fn !Function to calculate the initial io ratio for the first trade.
#initial-io !Strat will be initialized with this as the starting last trade. Must be larger than baseline.

#last-trade-time-key "last-trade-time"
#last-trade-io-key "last-trade-io"
#initial-time-key "initial-time"
#amount-used-key "amount-used"

#set-last-trade
last-io:,
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) last-io);

#set-initial-time
:set(hash(order-hash() initial-time-key) now());

#get-initial-time
_:get(hash(order-hash() initial-time-key));

#get-last-trade
last-time:get(hash(order-hash() last-trade-time-key)),
last-io:get(hash(order-hash() last-trade-io-key));

#get-epoch
initial-time: call<'get-initial-time>(),
last-time _: call<'get-last-trade>(),
duration: sub(now() any(last-time initial-time)),
total-duration: sub(now() initial-time),
ratio-freeze-amount-epochs: div(min-trade-amount amount-per-epoch),
ratio-freeze-trade-epochs: mul(ratio-freeze-amount-epochs div(time-per-amount-epoch time-per-trade-epoch)),
amount-epochs: div(total-duration time-per-amount-epoch),
trade-epochs: saturating-sub(div(duration time-per-trade-epoch) ratio-freeze-trade-epochs);

#amount-for-epoch
amount-epochs
trade-epochs:,
total-available: linear-growth(0 amount-per-epoch amount-epochs),
used: get(hash(order-hash() amount-used-key)),
unused: sub(total-available used),
decay: call<'halflife>(trade-epochs),
shy-decay: every(greater-than(trade-epochs shy-epoch) decay),
variable-component: sub(max-trade-amount min-trade-amount),
target-amount: add(min-trade-amount mul(variable-component shy-decay)),
capped-unused: min(unused target-amount);

#halflife
epoch:,
/**
 * Shrinking the multiplier like this
 * then applying it 10 times allows for
 * better precision when max-io-ratio
 * is very large, e.g. ~1e10 or ~1e20+
 *
 * This works because `power` loses
 * precision on base `0.5` when the
 * exponent is large and can even go
 * to `0` while the io-ratio is still
 * large. Better to keep the multiplier
 * higher precision and drop the io-ratio
 * smoothly for as long as we can.
 */
multiplier:
  power(0.5 div(epoch 10)),
val:
  mul(
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
  );

#io-for-epoch
epoch:,
last-io: call<'get-last-trade>(),
max-next-trade: any(mul(last-io next-trade-multiplier) call<'initial-io-fn>()),
baseline-next-trade: mul(last-io next-trade-baseline-multiplier),
real-baseline: max(baseline-next-trade call<'baseline-fn>()),
variable-component: saturating-sub(max-next-trade real-baseline),
above-baseline: mul(variable-component call<'halflife>(epoch)),
_: add(real-baseline above-baseline);

#constant-initial-io
_: initial-io;

#constant-baseline
_: baseline;

#sflr-baseline
_: sflr-exchange-rate();

#sflr-baseline-inv
_: inv(sflr-exchange-rate());

#handle-add-order
using-words-from raindex-subparser subparser-0
:call<'set-initial-time>();

#calculate-io
using-words-from raindex-subparser subparser-0
amount-epochs
trade-epochs:call<'get-epoch>(),
max-output: call<'amount-for-epoch>(amount-epochs trade-epochs),
io: call<'io-for-epoch>(trade-epochs),
:call<'set-last-trade>(io);

#handle-io
min-amount: mul(min-trade-amount 0.9),
:ensure(greater-than-or-equal-to(output-vault-decrease() min-amount) "Min trade amount."),
used: get(hash(order-hash() amount-used-key)),
:set(hash(order-hash() amount-used-key) add(used output-vault-decrease()));